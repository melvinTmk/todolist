[{"C:\\Users\\melvi\\OneDrive\\Bureau\\todolist\\src\\index.js":"1","C:\\Users\\melvi\\OneDrive\\Bureau\\todolist\\src\\App.js":"2","C:\\Users\\melvi\\OneDrive\\Bureau\\todolist\\src\\reportWebVitals.js":"3","C:\\Users\\melvi\\OneDrive\\Bureau\\todolist\\src\\Components\\Form.js":"4","C:\\Users\\melvi\\OneDrive\\Bureau\\todolist\\src\\Components\\Item.js":"5"},{"size":500,"mtime":1647353022622,"results":"6","hashOfConfig":"7"},{"size":246,"mtime":1647353899376,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1647352735110,"results":"9","hashOfConfig":"7"},{"size":5118,"mtime":1647608442958,"results":"10","hashOfConfig":"7"},{"size":758,"mtime":1647526144347,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rkstz2",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\melvi\\OneDrive\\Bureau\\todolist\\src\\index.js",[],[],"C:\\Users\\melvi\\OneDrive\\Bureau\\todolist\\src\\App.js",[],[],"C:\\Users\\melvi\\OneDrive\\Bureau\\todolist\\src\\reportWebVitals.js",[],[],"C:\\Users\\melvi\\OneDrive\\Bureau\\todolist\\src\\Components\\Form.js",["28","29","30","31"],[],"import { useState } from \"react\";\r\nimport Item from \"./Item\";\r\nimport {v4 as uuidv4} from 'uuid'\r\n\r\nexport default function Form()\r\n{\r\n    const [dataArr, setDataArr] = useState([])\r\n\r\n    const [stateInput,setStateInput] = useState();\r\n\r\n    const [stateTask,setStateTask] = useState([]);\r\n\r\n    //FONCTION POUR SUPPRIMER UN ELEMENT DE LA LISTE \r\n    const deleteElement = id =>{\r\n        // Ici nous par rapport à l'id de l'item\r\n        const filteredState = dataArr.filter(item =>{\r\n           return item.id !== id;\r\n       })\r\n       const filteredStateComplete = stateTask.filter(item =>{\r\n        return item.id !== id;\r\n    })\r\n       setDataArr(filteredState)\r\n       setStateTask(filteredStateComplete)\r\n    }\r\n\r\n    // FONCTION POUR LIER NOTRE INPUT AU STATE (setStateInput)\r\n    const linkedInput = e =>{\r\n        setStateInput(e);\r\n    }\r\n\r\n\r\n    // FONCTION POUR AJOUTER UNE TACHE \r\n    const addTodo = e =>{\r\n        // Eviter le rechargement de la page lors de la soumission du formulaire\r\n        e.preventDefault();\r\n\r\n        if(dataArr.length > 5)\r\n        {\r\n            alert('Complete les autres tâches John Bob');\r\n        }\r\n        else\r\n        {\r\n            //Créer un nouveau tableau avec les données du State de notre liste car un State est immuable \r\n            const newArr = [...dataArr]\r\n    \r\n            // Création d'un nouvel objet \r\n            const newTodo = {};\r\n    \r\n            // Ajouter une propriété txt à l'objet \r\n    \r\n            newTodo.txt = stateInput;\r\n    \r\n            // Ajouter un id\r\n            newTodo.id = uuidv4();\r\n            // On ajoute ce nouvel objet dans notre nouveau tableau (newArr)\r\n            newArr.push(newTodo);\r\n    \r\n            // On change le State avec le nouveau tableau \r\n            setDataArr(newArr);\r\n    \r\n            //On reset le State de l'input en bonus \r\n            setStateInput('');\r\n        }\r\n    }\r\n\r\n    const taskState = id => {\r\n        const filteredItem = dataArr.filter(item =>{\r\n            return item.id == id;\r\n        })\r\n        \r\n        const finalArr = dataArr.filter(item =>{\r\n            return item.id !== id;\r\n        })\r\n        \r\n        const newCompleteTaskObj = {};\r\n        filteredItem.map((item) => {\r\n            newCompleteTaskObj.txt = item.txt;\r\n            newCompleteTaskObj.id = item.id;\r\n        })\r\n\r\n        const completeTask = [...stateTask]\r\n        completeTask.push(newCompleteTaskObj);\r\n        setStateTask(completeTask);\r\n        setDataArr(finalArr);\r\n    }\r\n\r\n\r\n    const moveElement = id => {\r\n        const filteredItem = stateTask.filter(item =>{\r\n            return item.id == id;\r\n        })\r\n        \r\n        const finalArr = stateTask.filter(item =>{\r\n            return item.id !== id;\r\n        })\r\n        \r\n        const newObj = {};\r\n        filteredItem.map((item) => {\r\n            newObj.txt = item.txt;\r\n            newObj.id = item.id;\r\n        })\r\n\r\n        const completeTask = [...dataArr]\r\n        completeTask.push(newObj);\r\n        setStateTask(finalArr);\r\n        setDataArr(completeTask);\r\n    }\r\n\r\n\r\n   \r\n    return(\r\n        <div className=\"m-auto px-4 col-12 col-sm-10 col-lg-6\">\r\n            <form className=\"mb-3\" onSubmit={e => addTodo(e)}>\r\n                <label htmlFor=\"todo\" className=\"form-label\">\r\n                    Chose à faire\r\n                </label>\r\n                <input value={stateInput} onInput={e => linkedInput(e.target.value)} type=\"text\" className=\"form-control\" id=\"todo\" placeholder=\"Entrez votre tâche\" />\r\n                <button className=\"mt-2 btn btn-dark d-block\">Envoyer</button>\r\n            </form>\r\n            <div className=\"bg-dark rounded p-4\">\r\n                <h2 className=\"text-white\">Liste des choses à faire</h2>\r\n                <ul className=\"list-group\">\r\n                    {dataArr.map((item)=>{\r\n                        return(\r\n                            <Item \r\n                            txt ={item.txt}\r\n                            key={item.id}\r\n                            id={item.id}\r\n                            delFunc = {deleteElement}\r\n                            stateOfTask = {taskState}\r\n                            />\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n\r\n                <br />\r\n                <div className=\"bg-secondary rounded p-4\">\r\n                    <h2 className=\"text-white\">Liste des choses faites </h2>\r\n                    <ul className=\"list-group\">\r\n                        {stateTask.map((item)=>{\r\n                                return(\r\n                                    <Item \r\n                                    txt ={item.txt}\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    delFunc = {deleteElement}\r\n                                    todoTask = {moveElement}\r\n                                    />\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\melvi\\OneDrive\\Bureau\\todolist\\src\\Components\\Item.js",[],[],{"ruleId":"32","severity":1,"message":"33","line":68,"column":28,"nodeType":"34","messageId":"35","endLine":68,"endColumn":30},{"ruleId":"36","severity":1,"message":"37","line":76,"column":33,"nodeType":"38","messageId":"39","endLine":76,"endColumn":35},{"ruleId":"32","severity":1,"message":"33","line":90,"column":28,"nodeType":"34","messageId":"35","endLine":90,"endColumn":30},{"ruleId":"36","severity":1,"message":"37","line":98,"column":33,"nodeType":"38","messageId":"39","endLine":98,"endColumn":35},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]