{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melvi\\\\OneDrive\\\\Bureau\\\\react-tp\\\\todolist\\\\src\\\\Components\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Item from \"./Item\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Form() {\n  _s();\n\n  const [dataArr, setDataArr] = useState([]);\n  const [stateInput, setStateInput] = useState();\n  const [stateTask, setStateTask] = useState([]); //FONCTION POUR SUPPRIMER UN ELEMENT DE LA LISTE \n\n  const deleteElement = id => {\n    // Ici nous par rapport à l'id de l'item\n    const filteredState = dataArr.filter(item => {\n      return item.id !== id;\n    });\n    setDataArr(filteredState);\n  }; // FONCTION POUR LIER NOTRE INPUT AU STATE (setStateInput)\n\n\n  const linkedInput = e => {\n    setStateInput(e);\n  }; // FONCTION POUR AJOUTER UNE TACHE \n\n\n  const addTodo = e => {\n    // Eviter le rechargement de la page lors de la soumission du formulaire\n    e.preventDefault(); //Créer un nouveau tableau avec les données du State de notre liste car un State est immuable \n\n    const newArr = [...dataArr]; // Création d'un nouvel objet \n\n    const newTodo = {}; // Ajouter une propriété txt à l'objet \n\n    newTodo.txt = stateInput; // Ajouter un id\n\n    newTodo.id = uuidv4(); // On ajoute ce nouvel objet dans notre nouveau tableau (newArr)\n\n    newArr.push(newTodo); // On change le State avec le nouveau tableau \n\n    setDataArr(newArr); //On reset le State de l'input en bonus \n\n    setStateInput('');\n  };\n\n  const taskState = id => {\n    const completeTask = [];\n    const filteredItem = dataArr.filter(item => {\n      return item.id == id;\n    }); //Créer un nouveau tableau avec les données du State de notre liste car un State est immuable \n\n    const newArr = [...dataArr]; // Création d'un nouvel objet \n\n    const newTodo = {}; // Ajouter une propriété txt à l'objet \n\n    newTodo.txt = stateInput; // Ajouter un id\n\n    newTodo.id = uuidv4(); // On ajoute ce nouvel objet dans notre nouveau tableau (newArr)\n\n    newArrCompleteTask.push(newTodo); // On change le State avec le nouveau tableau \n\n    setDataArr(newArr); //On reset le State de l'input en bonus \n\n    completeTask.push(filteredItem);\n    setStateTask(completeTask);\n    setDataArr(filteredItem);\n    console.log(completeTask);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"m-auto px-4 col-12 col-sm-10 col-lg-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"mb-3\",\n      onSubmit: e => addTodo(e),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"todo\",\n        className: \"form-label\",\n        children: \"Chose \\xE0 faire\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: stateInput,\n        onInput: e => linkedInput(e.target.value),\n        type: \"text\",\n        className: \"form-control\",\n        id: \"todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-2 btn btn-primary d-block\",\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Liste des choses \\xE0 faire\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: dataArr.map(item => {\n        return /*#__PURE__*/_jsxDEV(Item, {\n          txt: item.txt,\n          id: item.id,\n          delFunc: deleteElement,\n          stateOfTask: taskState\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Liste des choses faites\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), stateTask.map(item => {\n      return /*#__PURE__*/_jsxDEV(Item, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Form, \"ZZU4biurPYUu3h1w0+pmSIvyDAA=\");\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/melvi/OneDrive/Bureau/react-tp/todolist/src/Components/Form.js"],"names":["useState","Item","v4","uuidv4","Form","dataArr","setDataArr","stateInput","setStateInput","stateTask","setStateTask","deleteElement","id","filteredState","filter","item","linkedInput","e","addTodo","preventDefault","newArr","newTodo","txt","push","taskState","completeTask","filteredItem","newArrCompleteTask","console","log","target","value","map"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport Item from \"./Item\";\r\nimport {v4 as uuidv4} from 'uuid'\r\n\r\nexport default function Form()\r\n{\r\n    const [dataArr, setDataArr] = useState([])\r\n\r\n    const [stateInput,setStateInput] = useState();\r\n\r\n    const [stateTask,setStateTask] = useState([]);\r\n\r\n    //FONCTION POUR SUPPRIMER UN ELEMENT DE LA LISTE \r\n    const deleteElement = id =>{\r\n        // Ici nous par rapport à l'id de l'item\r\n        const filteredState = dataArr.filter(item =>{\r\n           return item.id !== id;\r\n       })\r\n       setDataArr(filteredState)\r\n    }\r\n\r\n    // FONCTION POUR LIER NOTRE INPUT AU STATE (setStateInput)\r\n    const linkedInput = e =>{\r\n        setStateInput(e);\r\n    }\r\n\r\n\r\n    // FONCTION POUR AJOUTER UNE TACHE \r\n    const addTodo = e =>{\r\n        // Eviter le rechargement de la page lors de la soumission du formulaire\r\n        e.preventDefault();\r\n\r\n        //Créer un nouveau tableau avec les données du State de notre liste car un State est immuable \r\n        const newArr = [...dataArr]\r\n\r\n        // Création d'un nouvel objet \r\n        const newTodo = {};\r\n\r\n        // Ajouter une propriété txt à l'objet \r\n\r\n        newTodo.txt = stateInput;\r\n\r\n        // Ajouter un id\r\n        newTodo.id = uuidv4();\r\n        // On ajoute ce nouvel objet dans notre nouveau tableau (newArr)\r\n        newArr.push(newTodo);\r\n\r\n        // On change le State avec le nouveau tableau \r\n        setDataArr(newArr);\r\n\r\n        //On reset le State de l'input en bonus \r\n        setStateInput('');\r\n    }\r\n\r\n    const taskState = id => {\r\n        const completeTask = []\r\n        const filteredItem = dataArr.filter(item =>{\r\n            return item.id == id;\r\n        })\r\n\r\n\r\n\r\n        //Créer un nouveau tableau avec les données du State de notre liste car un State est immuable \r\n        const newArr = [...dataArr]\r\n\r\n        // Création d'un nouvel objet \r\n        const newTodo = {};\r\n\r\n        // Ajouter une propriété txt à l'objet \r\n\r\n        newTodo.txt = stateInput;\r\n\r\n        // Ajouter un id\r\n        newTodo.id = uuidv4();\r\n        // On ajoute ce nouvel objet dans notre nouveau tableau (newArr)\r\n        newArrCompleteTask.push(newTodo);\r\n\r\n        // On change le State avec le nouveau tableau \r\n        setDataArr(newArr);\r\n\r\n        //On reset le State de l'input en bonus \r\n\r\n        completeTask.push(filteredItem)\r\n        setStateTask(completeTask);\r\n        setDataArr(filteredItem);\r\n        console.log(completeTask);\r\n    }\r\n    \r\n    return(\r\n        <div className=\"m-auto px-4 col-12 col-sm-10 col-lg-6\">\r\n            <form className=\"mb-3\" onSubmit={e => addTodo(e)}>\r\n                <label htmlFor=\"todo\" className=\"form-label\">\r\n                    Chose à faire\r\n                </label>\r\n                <input value={stateInput} onInput={e => linkedInput(e.target.value)} type=\"text\" className=\"form-control\" id=\"todo\" />\r\n                <button className=\"mt-2 btn btn-primary d-block\">Envoyer</button>\r\n            </form>\r\n            <h2>Liste des choses à faire</h2>\r\n            <ul className=\"list-group\">\r\n                {dataArr.map((item)=>{\r\n                    return(\r\n                        <Item \r\n                        txt ={item.txt}\r\n                        key={item.id}\r\n                        id={item.id}\r\n                        delFunc = {deleteElement}\r\n                        stateOfTask = {taskState}\r\n                        />\r\n                    )\r\n                })}\r\n            </ul>\r\n            <br /><hr />\r\n            <h2>Liste des choses faites</h2>\r\n            {stateTask.map((item)=>{\r\n                    return(\r\n                        <Item \r\n                        />\r\n                    )\r\n                })}\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}